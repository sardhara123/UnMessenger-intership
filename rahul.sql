create database org;
use org;
CREATE DATABASE ORG;
USE ORG;
CREATE TABLE Customers (
CustomerID INT PRIMARY KEY,
Name VARCHAR(255),
Email VARCHAR(255),
JoinDate DATE
);
CREATE TABLE Products (
ProductID INT PRIMARY KEY,
Name VARCHAR(255),
Category VARCHAR(255),
Price DECIMAL(10, 2)
);
CREATE TABLE Orders (
OrderID INT PRIMARY KEY,
CustomerID INT,
OrderDate DATE,
TotalAmount DECIMAL(10, 2),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);
CREATE TABLE OrderDetails (
OrderDetailID INT PRIMARY KEY,
OrderID INT,
ProductID INT,
Quantity INT,
PricePerUnit DECIMAL(10, 2),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);
INSERT INTO Customers (CustomerID, Name, Email, JoinDate) VALUES
(1, 'John Doe', 'johndoe@example.com', '2020-01-10'),
(2, 'Jane Smith', 'janesmith@example.com', '2020-01-15'),
(3, 'Jane arya', 'janearya@example.com', '2020-01-15'),
(4, 'Jamesh Smith', 'jameshsmith@example.com', '2020-01-15'),
(5, 'Janeyu herry', 'janeyuherry@example.com', '2020-01-15'),
(6, 'pittor Smith', 'pittorSmith@example.com', '2020-01-15'),
(7, 'herry son', 'herrson@example.com', '2020-01-15'),
(8, 'Jalisa jetli', 'jalisajetli@example.com', '2020-01-15'),
(9, 'sona thare', 'sonathare@example.com', '2020-01-15'),
(10, 'Alice Johnson', 'alicejohnson@example.com', '2020-03-05');
INSERT INTO Products (ProductID, Name, Category, Price) VALUES
(1, 'Laptop', 'Electronics', 15000.99),
(2, 'Smartphone', 'Electronics', 1500.99),
(3, 'Smartwatch', 'Electronics', 1500.99),
(4, 'freez', 'Electronics', 18000.99),
(5, 'Smartwatch', 'Electronics', 1500.99),
(6, 'Smartphone', 'Electronics', 7000.99),
(7, 'freez', 'Electronics', 18000.90),
(8, 'tablet', 'Electronics', 6000.82),
(9, 'tublite', 'Electrical', 50.99),
(10, 'Desk Lamp', 'Home Decor', 29.99);
INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount)
VALUES
(1, 1, '2023-02-15', 15000.99),
(2, 2, '2023-02-17', 1500.99),
(3, 3, '2023-03-17', 1500.99),
(4, 4, '2023-04-17', 18000.99),
(5, 5, '2023-05-17', 1500.99),
(6, 6, '2023-06-17', 7000.99),
(7, 7, '2023-07-17', 18000.90),
(8, 8, '2023-08-17', 6000.82),
(9, 9, '2023-11-17', 50.99),
(10, 10, '2023-12-21', 29.99);
INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity,
PricePerUnit) VALUES
(1, 1, 1, 1, 15000.99),
(2, 2, 2, 2, 3000.99),
(3, 3, 3, 3, 3500.99),
(4, 4, 4, 1, 18000.99),
(5, 5, 5, 4, 9000.99),
(6, 6, 6, 1, 7000.99),
(7, 7, 7, 1, 18000.90),
(8, 8, 8, 2, 12000.82),
(9, 9, 9, 2, 100.99),
(10, 10, 2, 2,58.99 );

#1.1. List all customers#
select * from customers;
#1.2. Show all products in the 'Electronics' category#
select * from products where category="Electronics";
#1.3. Find the total number of orders placed.#
select count(OrderID) from Orders;
#1.4. Display the details of the most recent order#
select OrderDate from orders order by OrderDate desc limit 1;
#2.1. List all products along with the names of the customers who ordered them.#
SELECT
    p.productid,
    p.name,
    c.name
FROM
    products p
JOIN
    orderdetails od ON p.productid = od.productid
JOIN
    orders o ON od.orderid = o.orderid
JOIN
    customers c ON o.customerid = c.customerid;
#2.2. Show orders that include more than one product#
SELECT orders.orderid, COUNT(orderdetails.productid) AS product_count
FROM orders
JOIN orderdetails ON orders.orderid = orderdetails.orderid
GROUP BY orders.orderid;
#2.3. Find the total sales amount for each customer#
SELECT customers.customerid, customers.name, SUM(orders.TotalAmount) AS total_sales
FROM customers
JOIN orders ON customers.customerid = orders.customerid
GROUP BY customers.customerid, customers.name;
#3.1. Calculate the total revenue generated by each product category#
SELECT p.category, p.name,
       SUM(od.PricePerUnit * od.quantity) AS total_revenue
FROM products p
JOIN orderdetails od ON p.productid = od.productid
JOIN orders o ON od.orderid = o.orderid
JOIN customers cust ON o.customerid = cust.customerid
GROUP BY p.category, p.name;
#3.2. Determine the average order value#
select avg(TotalAmount) from orders;
#3.3. Find the month with the highest number of orders#
SELECT 
EXTRACT(MONTH FROM orderdate) AS order_month,
COUNT(*) AS number_of_orders
FROM 
Orders
GROUP BY 
EXTRACT(MONTH FROM orderdate)
ORDER BY 
number_of_orders DESC
LIMIT 1;
#4.1. Identify customers who have not placed any orders.#
SELECT Name
FROM customers
WHERE Name IN (
    SELECT orderID
    FROM orders
);
#4.2. Find products that have never been ordered#
SELECT productid,name
FROM Products
WHERE productid NOT IN (
    SELECT DISTINCT productid
    FROM Orders
);
#4.3. Show the top 3 best-selling products.#
SELECT Name from Products order by Name desc limit 3;
#5.1. List orders placed in the last month#
select orderdate from orders order by orderdate desc limit 1;
#5.2. Determine the oldest customer in terms of membership duration#
select JoinDate from Customers order by JoinDate Asc limit 1;
#6.1. Rank customers based on their total spending#
select TotalAmount, rank() over(order by TotalAmount) from orders;
#6.2. Identify the most popular product category.#
select Name, rank() over(order by Name) from products;
#6.3. Calculate the month-over-month growth rate in sales#
select month(orderdate) as month, sum(totalamount) as growth from orders group by month order by month;
#7.1. Add a new customer to the Customers table.#
INSERT INTO customers (CustomerID, Name, Email, JoinDate)
VALUES (11, 'heliparket', 'heliparker@example.com', '2021-09-11');
#7.2. Update the price of a specific product.#
UPDATE products
SET price = 19.99
WHERE productid = 1;




    

